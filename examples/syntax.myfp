data Equal : {A : Type} -> A -> A -> Type where
  | refl : {A : Type} -> {x : A} -> Equal x x

syntax x == y = Equal x y

let trans : {A : Type} -> {x y z : A} -> x == y -> y == z -> x == z
  = \ e case e of
      | refl => \ e' case e' of
        | refl => refl

let cong : {A B : Type} -> {x y : A} -> (f : A -> B) -> x == y -> f x == f y
  = \ f \ e case e of
      | refl => refl



data Nat : Type where
  | zero : Nat
  | suc : Nat -> Nat

syntax 0 = zero
syntax 1 = suc (0)
syntax 2 = suc (1)

let add : Nat -> Nat -> Nat
  = \ x case x of
        | zero => \ y y
        | suc n => \ y suc (add n y)

syntax n + m = add n m

let mult : Nat -> Nat -> Nat
  = \ x case x of
        | zero => \ y zero
        | suc n => \ y n + (mult n y)

syntax n * m = mult n m

let fact_1+1=2 : ((1) + (1)) == (2)
  = refl

let lemma_m=m+0 : (m : Nat) -> m == (m + (0))
  = \ m case m of
      | zero => refl
      | suc m' =>  cong suc (lemma_m=m+0 m')

let lemma_Sm+n=m+Sn : (m n : Nat) -> suc (m + n) == (m + suc n)
  = \ m \ n case m of
      | zero => refl
      | suc m' => cong suc (lemma_Sm+n=m+Sn m' n)

let theorem_add_comm : (m n : Nat) -> (m + n) == (n + m)
  = \ m \ n case m of
      | zero => lemma_m=m+0 n
      | suc m' => trans (cong suc (theorem_add_comm m' n)) (lemma_Sm+n=m+Sn n m')